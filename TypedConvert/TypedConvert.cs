
using System;


// <auto-generated/>
namespace TypedConvert
{
    public class Convert
    {
        public static TTo ChangeType<TFrom, TTo>(TFrom value)
        {
            return ConverterInternal<TFrom, TTo>.ConverterDelegate(value);
        }

        private static class ConverterInternal<TFrom, TTo>
        {
            public readonly static Converter<TFrom, TTo> ConverterDelegate = CreateDelegate();

            private static Type[] paramTypes = null;

            private static TTo ThrowIfCannotConvert(TFrom value) => throw new InvalidCastException();

            public static Converter<TFrom, TTo> CreateDelegate()
            {
                paramTypes = paramTypes ?? new[] { typeof(TFrom) };
                if (typeof(TFrom) == typeof(TTo))
                {
                    return (Converter<TFrom, TTo>)(object)(new Func<TFrom, TFrom>(value => value));
                }
                if (typeof(TTo) == typeof(Boolean))
                {
                    var method = typeof(System.Convert).GetMethod("ToBoolean", paramTypes);
                    if (method != null)
                    {
                        return (Converter<TFrom, TTo>)Delegate.CreateDelegate(typeof(Converter<TFrom, TTo>), method);
                    }
                }
                if (typeof(TTo) == typeof(Byte))
                {
                    var method = typeof(System.Convert).GetMethod("ToByte", paramTypes);
                    if (method != null)
                    {
                        return (Converter<TFrom, TTo>)Delegate.CreateDelegate(typeof(Converter<TFrom, TTo>), method);
                    }
                }
                if (typeof(TTo) == typeof(Char))
                {
                    var method = typeof(System.Convert).GetMethod("ToChar", paramTypes);
                    if (method != null)
                    {
                        return (Converter<TFrom, TTo>)Delegate.CreateDelegate(typeof(Converter<TFrom, TTo>), method);
                    }
                }
                if (typeof(TTo) == typeof(DateTime))
                {
                    var method = typeof(System.Convert).GetMethod("ToDateTime", paramTypes);
                    if (method != null)
                    {
                        return (Converter<TFrom, TTo>)Delegate.CreateDelegate(typeof(Converter<TFrom, TTo>), method);
                    }
                }
                if (typeof(TTo) == typeof(Decimal))
                {
                    var method = typeof(System.Convert).GetMethod("ToDecimal", paramTypes);
                    if (method != null)
                    {
                        return (Converter<TFrom, TTo>)Delegate.CreateDelegate(typeof(Converter<TFrom, TTo>), method);
                    }
                }
                if (typeof(TTo) == typeof(Double))
                {
                    var method = typeof(System.Convert).GetMethod("ToDouble", paramTypes);
                    if (method != null)
                    {
                        return (Converter<TFrom, TTo>)Delegate.CreateDelegate(typeof(Converter<TFrom, TTo>), method);
                    }
                }
                if (typeof(TTo) == typeof(Int16))
                {
                    var method = typeof(System.Convert).GetMethod("ToInt16", paramTypes);
                    if (method != null)
                    {
                        return (Converter<TFrom, TTo>)Delegate.CreateDelegate(typeof(Converter<TFrom, TTo>), method);
                    }
                }
                if (typeof(TTo) == typeof(Int32))
                {
                    var method = typeof(System.Convert).GetMethod("ToInt32", paramTypes);
                    if (method != null)
                    {
                        return (Converter<TFrom, TTo>)Delegate.CreateDelegate(typeof(Converter<TFrom, TTo>), method);
                    }
                }
                if (typeof(TTo) == typeof(Int64))
                {
                    var method = typeof(System.Convert).GetMethod("ToInt64", paramTypes);
                    if (method != null)
                    {
                        return (Converter<TFrom, TTo>)Delegate.CreateDelegate(typeof(Converter<TFrom, TTo>), method);
                    }
                }
                if (typeof(TTo) == typeof(SByte))
                {
                    var method = typeof(System.Convert).GetMethod("ToSByte", paramTypes);
                    if (method != null)
                    {
                        return (Converter<TFrom, TTo>)Delegate.CreateDelegate(typeof(Converter<TFrom, TTo>), method);
                    }
                }
                if (typeof(TTo) == typeof(Single))
                {
                    var method = typeof(System.Convert).GetMethod("ToSingle", paramTypes);
                    if (method != null)
                    {
                        return (Converter<TFrom, TTo>)Delegate.CreateDelegate(typeof(Converter<TFrom, TTo>), method);
                    }
                }
                if (typeof(TTo) == typeof(String))
                {
                    var method = typeof(System.Convert).GetMethod("ToString", paramTypes);
                    if (method != null)
                    {
                        return (Converter<TFrom, TTo>)Delegate.CreateDelegate(typeof(Converter<TFrom, TTo>), method);
                    }
                }
                if (typeof(TTo) == typeof(UInt16))
                {
                    var method = typeof(System.Convert).GetMethod("ToUInt16", paramTypes);
                    if (method != null)
                    {
                        return (Converter<TFrom, TTo>)Delegate.CreateDelegate(typeof(Converter<TFrom, TTo>), method);
                    }
                }
                if (typeof(TTo) == typeof(UInt32))
                {
                    var method = typeof(System.Convert).GetMethod("ToUInt32", paramTypes);
                    if (method != null)
                    {
                        return (Converter<TFrom, TTo>)Delegate.CreateDelegate(typeof(Converter<TFrom, TTo>), method);
                    }
                }
                if (typeof(TTo) == typeof(UInt64))
                {
                    var method = typeof(System.Convert).GetMethod("ToUInt64", paramTypes);
                    if (method != null)
                    {
                        return (Converter<TFrom, TTo>)Delegate.CreateDelegate(typeof(Converter<TFrom, TTo>), method);
                    }
                }
                return new Converter<TFrom, TTo>(value => (TTo)System.Convert.ChangeType((object)value, typeof(TTo)));
            }
        }
    }
}